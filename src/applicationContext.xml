<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util
     http://www.springframework.org/schema/util/spring-util-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="configLocation" value="classpath:booking.cfg.xml"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/ticketorder</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
            </props>
        </property>

        <property name="packagesToScan">
            <list>
                <value>ts.model</value>
                <value>ts.daoBase</value>
                <value>ts.daoImpl</value>
            </list>
        </property>

    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" />
            <!--
            Propagation ：　　key属性确定代理应该给哪个方法增加事务行为。这样的属性最重要的部份是传播行为。有以下选项可供使用：
            PROPAGATION_REQUIRED-支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
            PROPAGATION_SUPPORTS-支持当前事务，如果当前没有事务，就以非事务方式执行。
            PROPAGATION_MANDATORY-支持当前事务，如果当前没有事务，就抛出异常。
            PROPAGATION_REQUIRES_NEW-新建事务，如果当前存在事务，把当前事务挂起。
            PROPAGATION_NOT_SUPPORTED-以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
            PROPAGATION_NEVER-以非事务方式执行，如果当前存在事务，则抛出异常。
            -->
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="interceptorPointCuts"  expression="execution(* ts.serviceImpl.*.*(..)) execution(* ts.daoImpl.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
    </aop:config>

    <bean id="airportDAO" class="ts.daoImpl.AirportDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="agencyDAO" class="ts.daoImpl.AgencyDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="historyDao" class="ts.daoImpl.HistoryDao">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="bookDAO" ref="bookDAO"/>
        <property name="flightDAO" ref="flightDAO"/>
        <property name="airportDAO" ref="airportDAO"/>
    </bean>
    <bean id="bookDAO" class="ts.daoImpl.BookDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="historyDao" ref="historyDao"/>
        <property name="flightDAO" ref="flightDAO"/>
        <property name="passengerDAO" ref="passengerDAO"/>
    </bean>
    <bean id="passengerDAO" class="ts.daoImpl.PassengerDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="agencyDAO" ref="agencyDAO"/>
    </bean>
    <bean id="airCompanyDAO" class="ts.daoImpl.AirCompanyDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="flightDAO" class="ts.daoImpl.FlightDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="companyDAO" ref="airCompanyDAO"/>
        <property name="airportDAO" ref="airportDAO"/>
    </bean>

    <bean class="ts.util.AddHistory" id="addHistory" init-method="init">
        <property name="historyDao" ref="historyDao"/>
        <property name="flightDAO" ref="flightDAO"/>
    </bean>

    <bean id="simpleConverter" class="org.codehaus.jettison.mapped.SimpleConverter"/>

    <!-- REST服务的注解例子 -->
    <jaxrs:server id="Service" address="/REST">
        <jaxrs:serviceBeans>
            <bean class="ts.serviceImpl.CompanyService">
                <property name="airportDAO" ref="airportDAO"/>
                <property name="airCompanyDAO" ref="airCompanyDAO"/>
                <property name="bookDAO" ref="bookDAO"/>
                <property name="flightDAO" ref="flightDAO"/>
                <property name="historyDao" ref="historyDao"/>
            </bean>
            <bean class="ts.serviceImpl.AgencyService">
                <property name="passengerDAO" ref="passengerDAO"/>
                <property name="bookDAO" ref="bookDAO"/>
                <property name="agencyDAO" ref="agencyDAO"/>
                <property name="historyDao" ref="historyDao"/>
            </bean>
        </jaxrs:serviceBeans>

        <jaxrs:extensionMappings>
            <entry key="json" value="application/json" />
            <entry key="xml" value="application/xml" />
        </jaxrs:extensionMappings>

        <jaxrs:providers>
            <ref bean="jsonProvider" />
            <bean class="ts.serviceException.InvokeFaultExceptionMapper" />
        </jaxrs:providers>
        <jaxrs:languageMappings>
            <entry key="en" value="en-gb" />
        </jaxrs:languageMappings>
    </jaxrs:server>

    <util:list id="jsonKeys">
        <value>app</value>
        <value>comment</value>
    </util:list>

    <util:list id="jsonTypes">
        <value>application/json</value>
        <value>application/jettison</value>
    </util:list>

    <!-- JsonProvider的属性说明:
    1. dropRootElement 默认为false，则Json格式会将类名作为第一个节点，如{Customer:{"id":123,"name":"John"}}，
    如果配置为true，则Json格式为{"id":123,"name":"John"}，而Gson等Json包会解析格式为后者。
    2. dropCollectionWrapperElement属性默认为false，则当遇到Collection时，
    Json会在集合中将容器中类名作为一个节点，比如{"Customer":{{"id":123,"name":"John"}}}，
    而设置为false，则JSon格式为{{"id":123,"name":"John"}}
    3. serializeAsArray属性默认为false，则当遇到Collecion时，格式为{{"id":123,"name":"John"}}，
    如果设置为true，则格式为[{"id":123,"name":"john"}]，而Gson等解析为后者。 -->

    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
        <property name="serializeAsArray" value="true" />
        <property name="arrayKeys" ref="jsonKeys" />
        <property name="produceMediaTypes" ref="jsonTypes" />
        <property name="consumeMediaTypes" ref="jsonTypes" />
        <property name="ignoreNamespaces" value="true" />
        <property name="dropRootElement" value="true" />
        <property name="dropCollectionWrapperElement" value="true" />
        <property name="ignoreMixedContent" value="true" />
        <property name="supportUnwrapped" value="true" />
        <property name="attributesToElements" value="true" />
        <property name="typeConverter" ref="simpleConverter"/>
    </bean>

</beans>
